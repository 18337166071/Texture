//
//  _ASConfiguration.m
//  Autogenerated by plank
//
//  DO NOT EDIT - EDITS WILL BE OVERWRITTEN
//  @generated
//

#import "_ASConfiguration.h"

struct _ASConfigurationDirtyProperties {
    unsigned int _ASConfigurationDirtyPropertyExperimentalFeatures:1;
};

@interface _ASConfiguration ()
@property (nonatomic, assign, readwrite) struct _ASConfigurationDirtyProperties configurationDirtyProperties;
@end

@interface _ASConfigurationBuilder ()
@property (nonatomic, assign, readwrite) struct _ASConfigurationDirtyProperties configurationDirtyProperties;
@end

@implementation _ASConfiguration
+ (NSString *)className
{
    return @"_ASConfiguration";
}
+ (NSString *)polymorphicTypeIdentifier
{
    return @"configuration";
}
+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dictionary
{
    return [[self alloc] initWithModelDictionary:dictionary];
}
- (instancetype)init
{
    return [self initWithModelDictionary:@{}];
}
- (instancetype)initWithModelDictionary:(NS_VALID_UNTIL_END_OF_SCOPE NSDictionary *)modelDictionary
{
    NSParameterAssert(modelDictionary);
    if (!modelDictionary) {
        return self;
    }
    if (!(self = [super init])) {
        return self;
    }
        {
            __unsafe_unretained id value = modelDictionary[@"experimentalFeatures"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    NSArray *items = value;
                    NSMutableArray *result0 = [NSMutableArray arrayWithCapacity:items.count];
                    for (id obj0 in items) {
                        if (obj0 != (id)kCFNull) {
                            id tmp0 = nil;
                            tmp0 = [obj0 copy];
                            if (tmp0 != nil) {
                                [result0 addObject:tmp0];
                            }
                        }
                    }
                    self->_experimentalFeatures = result0;
                }
                self->_configurationDirtyProperties._ASConfigurationDirtyPropertyExperimentalFeatures = 1;
            }
        }
    if ([self class] == [_ASConfiguration class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (instancetype)initWithBuilder:(_ASConfigurationBuilder *)builder
{
    NSParameterAssert(builder);
    return [self initWithBuilder:builder initType:PlankModelInitTypeDefault];
}
- (instancetype)initWithBuilder:(_ASConfigurationBuilder *)builder initType:(PlankModelInitType)initType
{
    NSParameterAssert(builder);
    if (!(self = [super init])) {
        return self;
    }
    _experimentalFeatures = builder.experimentalFeatures;
    _configurationDirtyProperties = builder.configurationDirtyProperties;
    if ([self class] == [_ASConfiguration class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(initType) }];
    }
    return self;
}
- (NSString *)debugDescription
{
    NSArray<NSString *> *parentDebugDescription = [[super debugDescription] componentsSeparatedByString:@"\n"];
    NSMutableArray *descriptionFields = [NSMutableArray arrayWithCapacity:1];
    [descriptionFields addObject:parentDebugDescription];
    struct _ASConfigurationDirtyProperties props = _configurationDirtyProperties;
    if (props._ASConfigurationDirtyPropertyExperimentalFeatures) {
        [descriptionFields addObject:[@"_experimentalFeatures = " stringByAppendingFormat:@"%@", _experimentalFeatures]];
    }
    return [NSString stringWithFormat:@"_ASConfiguration = {\n%@\n}", debugDescriptionForFields(descriptionFields)];
}
- (instancetype)copyWithBlock:(PLANK_NOESCAPE void (^)(_ASConfigurationBuilder *builder))block
{
    NSParameterAssert(block);
    _ASConfigurationBuilder *builder = [[_ASConfigurationBuilder alloc] initWithModel:self];
    block(builder);
    return [builder build];
}
- (BOOL)isEqual:(id)anObject
{
    if (self == anObject) {
        return YES;
    }
    if ([anObject isKindOfClass:[_ASConfiguration class]] == NO) {
        return NO;
    }
    return [self isEqualToConfiguration:anObject];
}
- (BOOL)isEqualToConfiguration:(_ASConfiguration *)anObject
{
    return (
        (anObject != nil) &&
        (_experimentalFeatures == anObject.experimentalFeatures || [_experimentalFeatures isEqualToArray:anObject.experimentalFeatures])
    );
}
- (NSUInteger)hash
{
    NSUInteger subhashes[] = {
        17,
        [_experimentalFeatures hash]
    };
    return PINIntegerArrayHash(subhashes, sizeof(subhashes) / sizeof(subhashes[0]));
}
- (instancetype)mergeWithModel:(_ASConfiguration *)modelObject
{
    return [self mergeWithModel:modelObject initType:PlankModelInitTypeFromMerge];
}
- (instancetype)mergeWithModel:(_ASConfiguration *)modelObject initType:(PlankModelInitType)initType
{
    NSParameterAssert(modelObject);
    _ASConfigurationBuilder *builder = [[_ASConfigurationBuilder alloc] initWithModel:self];
    [builder mergeWithModel:modelObject];
    return [[_ASConfiguration alloc] initWithBuilder:builder initType:initType];
}
#pragma mark - NSCopying
- (id)copyWithZone:(NSZone *)zone
{
    return self;
}
#pragma mark - NSSecureCoding
+ (BOOL)supportsSecureCoding
{
    return YES;
}
- (instancetype)initWithCoder:(NSCoder *)aDecoder
{
    if (!(self = [super init])) {
        return self;
    }
    _experimentalFeatures = [aDecoder decodeObjectOfClasses:[NSSet setWithArray:@[[NSString class], [NSArray class]]] forKey:@"experimentalFeatures"];
    _configurationDirtyProperties._ASConfigurationDirtyPropertyExperimentalFeatures = [aDecoder decodeIntForKey:@"experimentalFeatures_dirty_property"] & 0x1;
    if ([self class] == [_ASConfiguration class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (void)encodeWithCoder:(NSCoder *)aCoder
{
    [aCoder encodeObject:self.experimentalFeatures forKey:@"experimentalFeatures"];
    [aCoder encodeInt:_configurationDirtyProperties._ASConfigurationDirtyPropertyExperimentalFeatures forKey:@"experimentalFeatures_dirty_property"];
}
@end

@implementation _ASConfigurationBuilder
- (instancetype)initWithModel:(_ASConfiguration *)modelObject
{
    NSParameterAssert(modelObject);
    if (!(self = [super init])) {
        return self;
    }
    struct _ASConfigurationDirtyProperties configurationDirtyProperties = modelObject.configurationDirtyProperties;
    if (configurationDirtyProperties._ASConfigurationDirtyPropertyExperimentalFeatures) {
        _experimentalFeatures = modelObject.experimentalFeatures;
    }
    _configurationDirtyProperties = configurationDirtyProperties;
    return self;
}
- (_ASConfiguration *)build
{
    return [[_ASConfiguration alloc] initWithBuilder:self];
}
- (void)mergeWithModel:(_ASConfiguration *)modelObject
{
    NSParameterAssert(modelObject);
    _ASConfigurationBuilder *builder = self;
    if (modelObject.configurationDirtyProperties._ASConfigurationDirtyPropertyExperimentalFeatures) {
        builder.experimentalFeatures = modelObject.experimentalFeatures;
    }
}
- (void)setExperimentalFeatures:(NSArray<NSString *> *)experimentalFeatures
{
    _experimentalFeatures = experimentalFeatures;
    _configurationDirtyProperties._ASConfigurationDirtyPropertyExperimentalFeatures = 1;
}
@end
